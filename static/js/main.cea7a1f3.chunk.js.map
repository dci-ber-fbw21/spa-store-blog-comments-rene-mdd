{"version":3,"sources":["components/ProductDetails.js","components/Home.js","App.js","serviceWorker.js","reducer/rootReducer.js","index.js"],"names":["connect","state","dispatch","addNewComment","object","type","payload","comment","userName","text","date","id","postSlug","slug","deleteComment","props","useState","commentObject","setCommentObject","correctPost","setCorrectPost","clickHandler","trim","useEffect","posts","find","post","match","params","dangerouslySetInnerHTML","__html","htmlText","Header","as","dividing","Form","reply","onSubmit","Input","placeholder","className","required","value","onChange","username","target","TextArea","Date","now","Button","content","labelPosition","icon","primary","comments","length","map","dateToFormat","Comment","Group","minimal","key","Avatar","src","Content","Author","Metadata","fromNow","ago","Text","Actions","onClick","textAlign","Item","divided","index","title","Link","to","Image","size","Description","Extra","Icon","color","name","checkComments","App","Menu","path","component","ProductDetails","Home","Boolean","window","location","hostname","initState","rootReducer","action","unshift","filteredComments","filter","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cea7a1f3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Input, Button, Comment, Header, Form } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux';\r\nimport Moment from 'react-moment';\r\n\r\nconst ProductDetails = (props) => {\r\n\r\n    const [commentObject, setCommentObject] = useState({\r\n        userName: \"\",\r\n        text: \"\",\r\n        date: \"\",\r\n        id: \"\",\r\n\r\n    });\r\n    const [correctPost, setCorrectPost] = useState({});\r\n\r\n    const clickHandler = () => {\r\n        if (!commentObject.text.trim() || !commentObject.userName.trim()) {\r\n            return\r\n        }\r\n        props.addNewComment(commentObject)\r\n        setCommentObject({\r\n            ...commentObject,\r\n            userName: \"\",\r\n            text: \"\"\r\n        })\r\n\r\n    }\r\n    function createMarkup() {\r\n        return { __html: correctPost.htmlText };\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCorrectPost(props.posts.find(post => post.slug === props.match.params.slug));\r\n    }, [props.match.params.slug, props.posts]);\r\n\r\n    function form() {\r\n        return <Form reply onSubmit={clickHandler}>\r\n            <Input placeholder=\"Your username\" className=\"input\" required value={commentObject.userName} onChange={username => setCommentObject({ ...commentObject, userName: username.target.value })} />\r\n\r\n            <Form.TextArea value={commentObject.text} required placeholder=\"Please type your comment here\"\r\n                onChange={comment => setCommentObject({ ...commentObject, text: comment.target.value, date: new Date(), id: Date.now(), postSlug: props.match.params.slug })} />\r\n            <Button content='Add Reply' labelPosition='left' icon='edit' primary />\r\n        </Form>\r\n    }\r\n    function commentSection() {\r\n        return correctPost.comments && correctPost.comments.length > 0 ?\r\n            correctPost.comments.map(({ text, id, date, userName }) => {\r\n                const dateToFormat = new Date(date)\r\n\r\n                return (\r\n                    <Comment.Group minimal key={id}>\r\n                        <Comment>\r\n                            <Comment.Avatar as='a' src='https://react.semantic-ui.com/images/avatar/small/ade.jpg' />\r\n                            <Comment.Content>\r\n                                <Comment.Author as='a'>{userName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <span><Moment date={dateToFormat} fromNow ago /></span>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text>{text}</Comment.Text>\r\n                                <Comment.Actions>\r\n                                    <a onClick={() => props.deleteComment(id, props.match.params.slug)}>Delete</a>\r\n                                </Comment.Actions>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    </Comment.Group>\r\n                )\r\n            })\r\n            :\r\n            <Header as=\"h2\" content=\"No comments yet\" textAlign=\"center\" />\r\n\r\n    }\r\n    function commentHeader() {\r\n        return <Header as='h3' dividing> Comments</Header>\r\n    }\r\n    return (\r\n        <div>\r\n            {correctPost ? <div dangerouslySetInnerHTML={createMarkup()} /> : null}\r\n            {commentHeader()}\r\n            {form()}\r\n            {commentSection()}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n\r\n    return {\r\n        addNewComment: (object) => {\r\n            dispatch({\r\n                type: \"ADD_COMMENT\",\r\n                payload: {\r\n                    comment: {\r\n                        userName: object.userName,\r\n                        text: object.text,\r\n                        date: object.date,\r\n                        id: object.id,\r\n                        postSlug: object.postSlug,\r\n                    },\r\n                    slug: object.postSlug\r\n                }\r\n            })\r\n        },\r\n\r\n\r\n        deleteComment: (id, slug) => {\r\n            dispatch({\r\n                type: \"DELETE_COMMENT\",\r\n                payload: {\r\n                    id,\r\n                    slug,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDetails);\r\n","import React from 'react';\r\nimport { Item, Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Home = (props) => {\r\n    const { posts } = props;\r\n    function checkComments(comments) {\r\n        if (comments.length < 1) return \"No comments yet\";\r\n        if (comments.length === 1) return comments.length + \" comment\";\r\n        if (comments.length > 1) return comments.length + \" comments\";\r\n    }\r\n    function renderItems() {\r\n        return <Item.Group divided  >\r\n            {posts.map(({ slug, title, id, text, comments }, index) => {\r\n                return <Item as={Link} to={`${slug}`} key={id}>\r\n                    <Item.Image size='small' src={`https://picsum.photos/200/20${index}`}  />\r\n                    <Item.Content>\r\n                        <Item.Header as='a'>{title}</Item.Header>\r\n                        <Item.Description>{text}</Item.Description>\r\n                        <Item.Extra>\r\n                            <Icon color='blue' name='comment' /> {checkComments(comments)}\r\n                        </Item.Extra>\r\n                    </Item.Content>\r\n                </Item>\r\n            })}\r\n\r\n        </Item.Group>\r\n    }\r\n    return (\r\n        renderItems()\r\n    );\r\n}\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        posts: state.posts\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Home);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport ProductDetails from './components/ProductDetails';\r\nimport Home from './components/Home';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nfunction App() {\r\n  function markUp() {\r\n    return <Router>\r\n      <Menu >\r\n        <Menu.Item icon=\"home\" as={Link} to=\"/\" />\r\n      </Menu>\r\n      <Switch>\r\n        <Route path={'/:slug'} component={ProductDetails} />\r\n        <Route path=\"/\" component={Home} />\r\n      </Switch>\r\n    </Router>\r\n  }\r\n  return (\r\n    markUp()\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import data from \".././data.json\"\r\nconst initState = {\r\n    posts: data,\r\n}\r\n\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n\r\n    if (action.type === \"ADD_COMMENT\") {\r\n\r\n        const posts = state.posts.map(post => {\r\n            if (post.slug === action.payload.comment.postSlug) {\r\n                post.comments.unshift(action.payload.comment);\r\n            }\r\n            return post\r\n        });\r\n\r\n        return { ...state, posts }\r\n    }\r\n    if (action.type === \"DELETE_COMMENT\") {\r\n        const posts = state.posts.map(post => {\r\n            if (post.slug === action.payload.slug) {\r\n                let newArray = [...post.comments]\r\n                const filteredComments = newArray.filter(comment => comment.id !== action.payload.id)\r\n                return { ...post, comments: filteredComments }\r\n            }\r\n            return post\r\n        }\r\n        );\r\n        return { ...state, posts }\r\n    }\r\n    return state\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from \"react-redux\";\r\nimport rootReducer from \"../src/reducer/rootReducer\"\r\n\r\nconst store = createStore(\r\n  rootReducer /* preloadedState, */,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n);\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}